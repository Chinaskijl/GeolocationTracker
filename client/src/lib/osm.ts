
/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenStreetMap –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
 */

import type { City } from "../../shared/schema";

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö OpenStreetMap
 * @param cityName - –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
 * @param latitude - –®–∏—Ä–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
 * @param longitude - –î–æ–ª–≥–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
 * @returns Promise —Å –º–∞—Å—Å–∏–≤–æ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞
 */
export async function fetchCityBoundaries(cityName: string, latitude: number, longitude: number): Promise<[number, number][]> {
  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Overpass API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü –≥–æ—Ä–æ–¥–∞
    const query = `
      [out:json];
      (
        relation["place"="city"]["name"="${cityName}"];
        relation["boundary"="administrative"]["name"="${cityName}"];
      );
      out body;
      >;
      out skel qt;
    `;
    
    const response = await fetch(`https://overpass-api.de/api/interpreter`, {
      method: 'POST',
      body: `data=${encodeURIComponent(query)}`,
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded'
      }
    });
    
    const data = await response.json();
    
    if (data.elements && data.elements.length > 0) {
      // –ò—â–µ–º —Ä–µ–ª–µ–π—à–µ–Ω —Å –≥—Ä–∞–Ω–∏—Ü–µ–π –≥–æ—Ä–æ–¥–∞
      const cityBoundary = data.elements.find((element: any) => 
        element.type === 'relation' && element.tags && 
        element.tags.boundary === 'administrative'
      );

      if (cityBoundary && cityBoundary.members) {
        // –ò—â–µ–º –≤–Ω–µ—à–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É (outer way)
        const outerWay = cityBoundary.members.find((member: any) => 
          member.role === 'outer' && member.geometry
        );

        if (outerWay && outerWay.geometry) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –≤ –º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç [lat, lon]
          return outerWay.geometry.map((node: any) => [node.lat, node.lon]);
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑ API, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${cityName}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã`);
    return generateApproximateBoundaries(latitude, longitude);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü –≥–æ—Ä–æ–¥–∞:', error);
    return generateApproximateBoundaries(latitude, longitude);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –≤ –≤–∏–¥–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
 * @param centerLat - –®–∏—Ä–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
 * @param centerLng - –î–æ–ª–≥–æ—Ç–∞ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
 * @returns –ú–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≥—Ä–∞–Ω–∏—Ü –≥–æ—Ä–æ–¥–∞
 */
function generateApproximateBoundaries(centerLat: number, centerLng: number): [number, number][] {
  const boundaries: [number, number][] = [];
  const numPoints = 8 + Math.floor(Math.random() * 5); // 8-12 —Ç–æ—á–µ–∫ –¥–ª—è –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω–æ–π —Ñ–æ—Ä–º—ã
  const baseRadius = 0.1 + Math.random() * 0.1; // –ë–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å 0.1-0.2 –≥—Ä–∞–¥—É—Å–∞
  
  for (let i = 0; i < numPoints; i++) {
    const angle = (i / numPoints) * 2 * Math.PI;
    // –í–∞—Ä—å–∏—Ä—É–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Ä–æ–≤–Ω–æ–π —Ñ–æ—Ä–º—ã
    const radius = baseRadius * (0.7 + Math.random() * 0.6); 
    const lat = centerLat + Math.sin(angle) * radius;
    const lng = centerLng + Math.cos(angle) * radius;
    boundaries.push([lat, lng]);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –≤ –∫–æ–Ω–µ—Ü, —á—Ç–æ–±—ã –∑–∞–º–∫–Ω—É—Ç—å –ø–æ–ª–∏–≥–æ–Ω
  boundaries.push(boundaries[0]);
  
  return boundaries;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –±–ª–∏–∑–ª–µ–∂–∞—â–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
 * @param cities - –ú–∞—Å—Å–∏–≤ –≥–æ—Ä–æ–¥–æ–≤
 * @returns –ú–∞—Å—Å–∏–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
 */
export function createCityConnections(cities: City[]): { city1: City, city2: City }[] {
  const connections: { city1: City, city2: City }[] = [];
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
  const calculateDistance = (city1: City, city2: City): number => {
    const lat1 = city1.latitude;
    const lon1 = city1.longitude;
    const lat2 = city2.latitude;
    const lon2 = city2.longitude;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –Ω–∞ —Å—Ñ–µ—Ä–µ
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLon = (lon2 - lon1) * Math.PI / 180;
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const distance = 6371 * c; // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    
    return distance;
  };
  
  // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π
  for (let i = 0; i < cities.length; i++) {
    const city1 = cities[i];
    const distances: { city: City, distance: number }[] = [];
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤
    for (let j = 0; j < cities.length; j++) {
      if (i !== j) {
        const city2 = cities[j];
        const distance = calculateDistance(city1, city2);
        distances.push({ city: city2, distance });
      }
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ –±–µ—Ä–µ–º 2-3 –±–ª–∏–∂–∞–π—à–∏—Ö –≥–æ—Ä–æ–¥–∞
    distances.sort((a, b) => a.distance - b.distance);
    const numConnections = Math.min(2 + Math.floor(Math.random() * 2), distances.length);
    
    for (let k = 0; k < numConnections; k++) {
      const city2 = distances[k].city;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      const alreadyConnected = connections.some(conn => 
        (conn.city1.id === city1.id && conn.city2.id === city2.id) || 
        (conn.city1.id === city2.id && conn.city2.id === city1.id)
      );
      
      if (!alreadyConnected) {
        connections.push({ city1, city2 });
      }
    }
  }
  
  return connections;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞
 * @param resource - –¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞
 * @returns –≠–º–æ–¥–∑–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞
 */
export function getResourceIcon(resource: string): string {
  switch (resource) {
    case 'gold': return 'üí∞';
    case 'food': return 'üåæ';
    case 'wood': return 'üå≤';
    case 'oil': return 'üõ¢Ô∏è';
    case 'metal': return '‚õèÔ∏è';
    case 'steel': return 'üî©';
    case 'weapons': return '‚öîÔ∏è';
    default: return resource;
  }
}
