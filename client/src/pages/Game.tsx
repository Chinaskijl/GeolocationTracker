import { useEffect, useState } from 'react';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { Map } from '@/components/Map';
import { ResourcePanel } from '@/components/ResourcePanel';
import { CityPanel } from '@/components/CityPanel';
import { useGameStore } from '@/lib/store';
import type { City, GameState } from '@shared/schema';
import { BUILDINGS } from '@/lib/game';

const MarketButton = ({ onOpenMarket }) => (
  <button 
    onClick={onOpenMarket}
    className="fixed bottom-4 right-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow-lg z-[1000] flex items-center space-x-2"
  >
    <span>üí∞</span>
    <span>–û—Ç–∫—Ä—ã—Ç—å —Ä—ã–Ω–æ–∫</span>
  </button>
);

const MarketPanel = ({ open, onClose }) => {
  const [activeTab, setActiveTab] = useState('buy');
  const [listings, setListings] = useState([]);
  const [transactions, setTransactions] = useState([]);
  const [priceHistory, setPriceHistory] = useState({});
  const [selectedResource, setSelectedResource] = useState('food');
  const [amount, setAmount] = useState('');
  const [price, setPrice] = useState('');
  const [loadingListings, setLoadingListings] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  
  const { gameState } = useGameStore();
  
  const resourceNames = {
    gold: '–ó–æ–ª–æ—Ç–æ',
    food: '–ï–¥–∞',
    wood: '–î–µ—Ä–µ–≤–æ',
    oil: '–ù–µ—Ñ—Ç—å',
    metal: '–ú–µ—Ç–∞–ª–ª',
    steel: '–°—Ç–∞–ª—å',
    weapons: '–û—Ä—É–∂–∏–µ'
  };
  
  const resourceIcons = {
    gold: 'üí∞',
    food: 'üçó',
    wood: 'üå≤',
    oil: 'üõ¢Ô∏è',
    metal: 'üîß',
    steel: '‚öôÔ∏è',
    weapons: '‚öîÔ∏è'
  };
  
  useEffect(() => {
    if (open) {
      fetchListings();
      fetchTransactions();
      fetchPriceHistory(selectedResource);
    }
  }, [open, selectedResource]);
  
  const fetchListings = async () => {
    try {
      setLoadingListings(true);
      const response = await fetch('/api/market/listings');
      const data = await response.json();
      setListings(data);
      setLoadingListings(false);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ—Ç–æ–≤:', error);
      setLoadingListings(false);
    }
  };
  
  const fetchTransactions = async () => {
    try {
      const response = await fetch('/api/market/transactions');
      const data = await response.json();
      setTransactions(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
    }
  };
  
  const fetchPriceHistory = async (resource) => {
    try {
      const response = await fetch(`/api/market/price-history/${resource}`);
      const data = await response.json();
      setPriceHistory(prev => ({ ...prev, [resource]: data }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω:', error);
    }
  };
  
  const handleCreateListing = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');
    
    if (!amount || !price) {
      setError('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω—É');
      return;
    }
    
    if (isNaN(Number(amount)) || isNaN(Number(price)) || Number(amount) <= 0 || Number(price) <= 0) {
      setError('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    if (activeTab === 'sell' && gameState?.resources[selectedResource] < Number(amount)) {
      setError(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${resourceNames[selectedResource]}`);
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if (activeTab === 'buy' && gameState?.resources.gold < Number(amount) * Number(price)) {
      setError('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É');
      return;
    }
    
    try {
      const response = await fetch('/api/market/create-listing', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          resourceType: selectedResource,
          amount: Number(amount),
          pricePerUnit: Number(price),
          type: activeTab
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        setSuccess('–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
        setAmount('');
        setPrice('');
        fetchListings();
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ—Ç');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ—Ç–∞:', error);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  };
  
  const handleBuyListing = async (listingId) => {
    setError('');
    setSuccess('');
    
    try {
      const response = await fetch('/api/market/buy', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          listingId
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        setSuccess('–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∞');
        fetchListings();
        fetchTransactions();
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª–æ—Ç–∞:', error);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  };
  
  const handleCancelListing = async (listingId) => {
    setError('');
    setSuccess('');
    
    try {
      const response = await fetch('/api/market/cancel', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          listingId
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        setSuccess('–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω');
        fetchListings();
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ª–æ—Ç');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ª–æ—Ç–∞:', error);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
  };
  
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ—Ç–æ–≤ –ø–æ —Ç–∏–ø—É –∏ —Ä–µ—Å—É—Ä—Å—É
  const filteredListings = listings.filter(listing => {
    if (activeTab === 'buy') {
      // –î–ª—è –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ—Ç—ã –ø—Ä–æ–¥–∞–∂–∏ (–æ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤)
      return listing.type === 'sell';
    } else if (activeTab === 'sell') {
      // –î–ª—è –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–æ–¥–∞–∂ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ—Ç—ã –ø–æ–∫—É–ø–∫–∏ (–æ—Ç –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤)
      return listing.type === 'buy';
    } else if (activeTab === 'myListings') {
      // –î–ª—è –º–æ–∏—Ö –ª–æ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ—Ç—ã –∏–≥—Ä–æ–∫–∞
      return listing.owner === 'player';
    }
    return true;
  });
  
  return (
    <div 
      className={`fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[2000] transition-opacity ${open ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}
    >
      <div className="bg-white rounded-lg p-4 w-4/5 max-w-5xl max-h-[90vh] overflow-y-auto">
        <div className="flex justify-between items-center mb-4">
          <h1 className="text-2xl font-bold">–†—ã–Ω–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤</h1>
          <button 
            onClick={onClose}
            className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-lg"
          >
            –ó–∞–∫—Ä—ã—Ç—å
          </button>
        </div>
        
        {/* –í–∫–ª–∞–¥–∫–∏ */}
        <div className="flex border-b mb-4">
          <button 
            className={`px-4 py-2 ${activeTab === 'buy' ? 'border-b-2 border-blue-500 font-bold' : ''}`}
            onClick={() => setActiveTab('buy')}
          >
            –ö—É–ø–∏—Ç—å
          </button>
          <button 
            className={`px-4 py-2 ${activeTab === 'sell' ? 'border-b-2 border-blue-500 font-bold' : ''}`}
            onClick={() => setActiveTab('sell')}
          >
            –ü—Ä–æ–¥–∞—Ç—å
          </button>
          <button 
            className={`px-4 py-2 ${activeTab === 'myListings' ? 'border-b-2 border-blue-500 font-bold' : ''}`}
            onClick={() => setActiveTab('myListings')}
          >
            –ú–æ–∏ –ª–æ—Ç—ã
          </button>
          <button 
            className={`px-4 py-2 ${activeTab === 'history' ? 'border-b-2 border-blue-500 font-bold' : ''}`}
            onClick={() => setActiveTab('history')}
          >
            –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
          </button>
          <button 
            className={`px-4 py-2 ${activeTab === 'priceChart' ? 'border-b-2 border-blue-500 font-bold' : ''}`}
            onClick={() => setActiveTab('priceChart')}
          >
            –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω
          </button>
        </div>
        
        {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –∏ —É—Å–ø–µ—Ö–µ */}
        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-2 rounded mb-4">
            {error}
          </div>
        )}
        
        {success && (
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-2 rounded mb-4">
            {success}
          </div>
        )}
        
        {/* –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ—Ç–∞ */}
        {(activeTab === 'buy' || activeTab === 'sell') && (
          <div className="mb-6 p-4 border rounded-lg bg-gray-50">
            <h2 className="text-lg font-semibold mb-2">
              {activeTab === 'buy' ? '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É' : '–ü—Ä–æ–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã'}
            </h2>
            <form onSubmit={handleCreateListing} className="flex flex-wrap gap-4 items-end">
              <div>
                <label className="block text-sm font-medium mb-1">–†–µ—Å—É—Ä—Å</label>
                <select 
                  value={selectedResource} 
                  onChange={(e) => setSelectedResource(e.target.value)}
                  className="border rounded p-2"
                >
                  {Object.entries(resourceNames).map(([key, name]) => (
                    <option key={key} value={key}>
                      {resourceIcons[key]} {name}
                    </option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</label>
                <input 
                  type="number" 
                  min="1"
                  value={amount} 
                  onChange={(e) => setAmount(e.target.value)}
                  className="border rounded p-2 w-28"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É</label>
                <input 
                  type="number" 
                  min="0.1"
                  step="0.1"
                  value={price} 
                  onChange={(e) => setPrice(e.target.value)}
                  className="border rounded p-2 w-28"
                />
              </div>
              
              <div>
                <button 
                  type="submit"
                  className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
                >
                  {activeTab === 'buy' ? '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' : '–í—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É'}
                </button>
              </div>
            </form>
          </div>
        )}
        
        {/* –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ */}
        {(activeTab === 'buy' || activeTab === 'sell' || activeTab === 'myListings') && (
          <>
            <h2 className="text-lg font-semibold mb-2">
              {activeTab === 'buy' ? '–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏' : 
               activeTab === 'sell' ? '–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É' : '–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã'}
            </h2>
            
            {loadingListings ? (
              <p className="text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
            ) : filteredListings.length === 0 ? (
              <p className="text-gray-500">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤</p>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full border-collapse">
                  <thead>
                    <tr className="bg-gray-100">
                      <th className="border p-2 text-left">–†–µ—Å—É—Ä—Å</th>
                      <th className="border p-2 text-left">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                      <th className="border p-2 text-left">–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É</th>
                      <th className="border p-2 text-left">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</th>
                      <th className="border p-2 text-left">–¢–∏–ø</th>
                      <th className="border p-2 text-left">–í–ª–∞–¥–µ–ª–µ—Ü</th>
                      <th className="border p-2 text-left">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                      <th className="border p-2 text-left">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredListings.map(listing => (
                      <tr key={listing.id} className="hover:bg-gray-50">
                        <td className="border p-2">
                          {resourceIcons[listing.resourceType]} {resourceNames[listing.resourceType]}
                        </td>
                        <td className="border p-2">{listing.amount}</td>
                        <td className="border p-2">{listing.pricePerUnit}</td>
                        <td className="border p-2">{(listing.amount * listing.pricePerUnit).toFixed(1)}</td>
                        <td className="border p-2">
                          {listing.type === 'sell' ? '–ü—Ä–æ–¥–∞–∂–∞' : '–ü–æ–∫—É–ø–∫–∞'}
                        </td>
                        <td className="border p-2">
                          {listing.owner === 'player' ? '–í–∞—à' : '–ò–ò'}
                        </td>
                        <td className="border p-2">{formatDate(listing.createdAt)}</td>
                        <td className="border p-2">
                          {listing.owner === 'player' ? (
                            <button
                              onClick={() => handleCancelListing(listing.id)}
                              className="bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm"
                            >
                              –û—Ç–º–µ–Ω–∏—Ç—å
                            </button>
                          ) : (
                            <button
                              onClick={() => handleBuyListing(listing.id)}
                              className="bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm"
                            >
                              {listing.type === 'sell' ? '–ö—É–ø–∏—Ç—å' : '–ü—Ä–æ–¥–∞—Ç—å'}
                            </button>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </>
        )}
        
        {/* –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ */}
        {activeTab === 'history' && (
          <>
            <h2 className="text-lg font-semibold mb-2">–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫</h2>
            
            {transactions.length === 0 ? (
              <p className="text-gray-500">–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫</p>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full border-collapse">
                  <thead>
                    <tr className="bg-gray-100">
                      <th className="border p-2 text-left">–†–µ—Å—É—Ä—Å</th>
                      <th className="border p-2 text-left">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                      <th className="border p-2 text-left">–¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É</th>
                      <th className="border p-2 text-left">–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</th>
                      <th className="border p-2 text-left">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å</th>
                      <th className="border p-2 text-left">–ü—Ä–æ–¥–∞–≤–µ—Ü</th>
                      <th className="border p-2 text-left">–î–∞—Ç–∞</th>
                    </tr>
                  </thead>
                  <tbody>
                    {transactions.map(transaction => (
                      <tr key={transaction.id} className="hover:bg-gray-50">
                        <td className="border p-2">
                          {resourceIcons[transaction.resourceType]} {resourceNames[transaction.resourceType]}
                        </td>
                        <td className="border p-2">{transaction.amount}</td>
                        <td className="border p-2">{transaction.pricePerUnit}</td>
                        <td className="border p-2">{transaction.totalPrice}</td>
                        <td className="border p-2">
                          {transaction.buyer === 'player' ? '–í—ã' : '–ò–ò'}
                        </td>
                        <td className="border p-2">
                          {transaction.seller === 'player' ? '–í—ã' : '–ò–ò'}
                        </td>
                        <td className="border p-2">{formatDate(transaction.timestamp)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}
          </>
        )}
        
        {/* –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω */}
        {activeTab === 'priceChart' && (
          <>
            <div className="mb-4">
              <h2 className="text-lg font-semibold mb-2">–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω</h2>
              
              <div className="mb-4">
                <label className="mr-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å:</label>
                <select 
                  value={selectedResource} 
                  onChange={(e) => setSelectedResource(e.target.value)}
                  className="border rounded p-2"
                >
                  {Object.entries(resourceNames).map(([key, name]) => (
                    <option key={key} value={key}>
                      {resourceIcons[key]} {name}
                    </option>
                  ))}
                </select>
              </div>
              
              {priceHistory[selectedResource] && priceHistory[selectedResource].length > 0 ? (
                <div className="border p-4 rounded-lg">
                  <div className="flex justify-between mb-2">
                    <span className="font-medium">–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω: {resourceNames[selectedResource]}</span>
                    <span className="text-sm text-gray-500">
                      –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {priceHistory[selectedResource][priceHistory[selectedResource].length - 1]?.price || "–ù/–î"}
                    </span>
                  </div>
                  <div className="h-60 bg-gray-50 rounded flex items-end p-2 gap-1">
                    {priceHistory[selectedResource].map((record, index) => {
                      const maxPrice = Math.max(...priceHistory[selectedResource].map(r => r.price));
                      const height = maxPrice ? (record.price / maxPrice) * 100 : 0;
                      
                      return (
                        <div key={index} className="flex-1 flex flex-col items-center">
                          <div 
                            className="w-full bg-blue-500 rounded-t" 
                            style={{ height: `${height}%` }}
                            title={`–¶–µ–Ω–∞: ${record.price}`}
                          ></div>
                          {index % Math.ceil(priceHistory[selectedResource].length / 5) === 0 && (
                            <div className="text-xs mt-1 rotate-45 origin-left">
                              {new Date(record.timestamp).toLocaleDateString()}
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                </div>
              ) : (
                <p className="text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞</p>
              )}
            </div>
          </>
        )}
      </div>
    </div>
  );
};


export default function Game() {
  const { setCities, setGameState } = useGameStore();
  const queryClient = useQueryClient();
  const [isMarketOpen, setIsMarketOpen] = useState(false);

  const { data: cities } = useQuery<City[]>({
    queryKey: ['/api/cities']
  });

  const { data: gameState } = useQuery<GameState>({
    queryKey: ['/api/game-state']
  });

  useEffect(() => {
    if (cities) {
      console.log('Cities updated:', cities);
      setCities(cities);
    }
  }, [cities, setCities]);

  useEffect(() => {
    if (gameState) {
      console.log('Game state updated:', gameState);
      setGameState(gameState);
    }
  }, [gameState, setGameState]);

  useEffect(() => {
    // –î–µ–ª–∞–µ–º BUILDINGS –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.BUILDINGS = BUILDINGS;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const ws = new WebSocket(`${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.host}/ws`);

    ws.onopen = () => {
      console.log('WebSocket connected');
    };

    ws.onmessage = (event) => {
      try {
        const message = JSON.parse(event.data);

        if (message.type === 'GAME_UPDATE' && message.gameState) {
          console.log('Received game state update:', message.gameState);
          setGameState(message.gameState);
        }

        if (message.type === 'CITIES_UPDATE' && message.cities) {
          console.log('Received cities update:', message.cities);
          setCities(message.cities);
        }

        if (message.type === 'CITY_UPDATE') {
          queryClient.invalidateQueries({ queryKey: ['/api/cities'] });
        }
      } catch (error) {
        console.error('Failed to parse WebSocket message:', error);
      }
    };

    ws.onerror = (error) => {
      console.error('WebSocket error:', error);
    };

    ws.onclose = () => {
      console.log('WebSocket disconnected');
    };

    return () => {
      if (ws.readyState === WebSocket.OPEN) {
        ws.close();
      }
    };
  }, [queryClient]);

  return (
    <div className="relative">
      <Map />
      <ResourcePanel />
      <CityPanel />
      <MarketButton onOpenMarket={() => setIsMarketOpen(true)} />
      <MarketPanel open={isMarketOpen} onClose={() => setIsMarketOpen(false)} />
    </div>
  );
}