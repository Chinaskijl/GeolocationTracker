
import React, { useEffect, useRef, useState } from 'react';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import { useStore } from '../lib/store';
import { City } from '../../../shared/schema';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π —Ä–∞–∑–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
const TERRITORY_COLORS = {
  player: '#4CAF50', // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –∏–≥—Ä–æ–∫–∞
  neutral: '#9E9E9E', // –°–µ—Ä—ã–π –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö
  enemy: '#F44336'    // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—Ä–∞–≥–æ–≤
};

// –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
function getResourceIcon(resource: string): string {
  switch (resource) {
    case 'gold': return 'üí∞';
    case 'wood': return 'üå≤';
    case 'food': return 'üåæ';
    case 'oil': return 'üõ¢Ô∏è';
    case 'metal': return '‚õèÔ∏è';
    case 'steel': return 'üî®';
    case 'weapons': return '‚öîÔ∏è';
    default: return 'üì¶';
  }
}

const Map: React.FC = () => {
  const { cities, selectedCity, setSelectedCity, gameState, armyTransfers } = useStore();
  const mapRef = useRef<L.Map | null>(null);
  const markersRef = useRef<L.Marker[]>([]);
  const polygonsRef = useRef<L.Polygon[]>([]);
  const routesRef = useRef<L.Polyline[]>([]);
  const armyMarkersRef = useRef<{[key: number]: L.CircleMarker}>({});
  const mapContainerRef = useRef<HTMLDivElement>(null);
  const [mapInitialized, setMapInitialized] = useState(false);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    if (!mapRef.current && mapContainerRef.current) {
      // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –†–æ—Å—Å–∏–∏
      mapRef.current = L.map(mapContainerRef.current).setView([55.7558, 37.6173], 5);
      
      // –î–æ–±–∞–≤–ª—è–µ–º OpenStreetMap —Ç–∞–π–ª—ã
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(mapRef.current);
      
      setMapInitialized(true);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (mapRef.current) {
        mapRef.current.remove();
        mapRef.current = null;
      }
    };
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –≥–æ—Ä–æ–¥–æ–≤ –∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (!mapRef.current || !mapInitialized || cities.length === 0) return;

    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã –∏ –ø–æ–ª–∏–≥–æ–Ω—ã
    clearMap();

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
    drawRoutesBetweenCities();

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏ –ø–æ–ª–∏–≥–æ–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
    cities.forEach(city => {
      addCityToMap(city);
    });

  }, [cities, mapInitialized, selectedCity]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∞—Ä–º–∏–π
  useEffect(() => {
    if (!mapRef.current || !mapInitialized) return;

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∞—Ä–º–∏–π
    Object.values(armyMarkersRef.current).forEach(marker => {
      marker.remove();
    });
    armyMarkersRef.current = {};

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∞—Ä–º–∏–π –≤ –ø—É—Ç–∏
    armyTransfers.forEach(transfer => {
      const fromCity = cities.find(c => c.id === transfer.fromCityId);
      const toCity = cities.find(c => c.id === transfer.toCityId);
      
      if (!fromCity || !toCity || !mapRef.current) return;

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∞—Ä–º–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
      const now = Date.now();
      const progress = Math.min(
        (now - transfer.startTime) / (transfer.arrivalTime - transfer.startTime),
        1
      );

      const lat = fromCity.latitude + (toCity.latitude - fromCity.latitude) * progress;
      const lng = fromCity.longitude + (toCity.longitude - fromCity.longitude) * progress;

      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∞—Ä–º–∏–∏
      if (armyMarkersRef.current[transfer.id]) {
        armyMarkersRef.current[transfer.id].setLatLng([lat, lng]);
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–≤–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ –∞—Ä–º–∏–∏
        const color = TERRITORY_COLORS[fromCity.owner as keyof typeof TERRITORY_COLORS] || '#000000';
        
        const armyMarker = L.circleMarker([lat, lng], {
          radius: 8,
          color: '#000000',
          fillColor: color,
          fillOpacity: 0.8,
          weight: 1
        }).addTo(mapRef.current);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        armyMarker.bindTooltip(`–ê—Ä–º–∏—è –∏–∑ ${fromCity.name}<br>–í–æ–π—Å–∫–∞: ${transfer.amount}<br>–ü—Ä–∏–±—ã—Ç–∏–µ: ${Math.round((1-progress)*100)}%`);
        
        armyMarkersRef.current[transfer.id] = armyMarker;
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞—Ä–º–∏–π –∫–∞–∂–¥—ã–µ 100–º—Å
    const interval = setInterval(() => {
      armyTransfers.forEach(transfer => {
        const fromCity = cities.find(c => c.id === transfer.fromCityId);
        const toCity = cities.find(c => c.id === transfer.toCityId);
        
        if (!fromCity || !toCity || !mapRef.current) return;

        const now = Date.now();
        const progress = Math.min(
          (now - transfer.startTime) / (transfer.arrivalTime - transfer.startTime),
          1
        );

        const lat = fromCity.latitude + (toCity.latitude - fromCity.latitude) * progress;
        const lng = fromCity.longitude + (toCity.longitude - fromCity.longitude) * progress;

        if (armyMarkersRef.current[transfer.id]) {
          armyMarkersRef.current[transfer.id].setLatLng([lat, lng]);
          armyMarkersRef.current[transfer.id].setTooltipContent(
            `–ê—Ä–º–∏—è –∏–∑ ${fromCity.name}<br>–í–æ–π—Å–∫–∞: ${transfer.amount}<br>–ü—Ä–∏–±—ã—Ç–∏–µ: ${Math.round((1-progress)*100)}%`
          );
        }
      });
    }, 100);

    return () => clearInterval(interval);
  }, [armyTransfers, cities, mapInitialized]);
  
  // –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ä—Ç—ã
  const clearMap = () => {
    // –û—á–∏—â–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∏ –ø–æ–ª–∏–≥–æ–Ω—ã
    markersRef.current.forEach(marker => marker.remove());
    polygonsRef.current.forEach(polygon => polygon.remove());
    routesRef.current.forEach(route => route.remove());
    
    markersRef.current = [];
    polygonsRef.current = [];
    routesRef.current = [];
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É
  const addCityToMap = (city: City) => {
    if (!mapRef.current) return;
    
    const color = TERRITORY_COLORS[city.owner as keyof typeof TERRITORY_COLORS];

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–∏–≥–æ–Ω —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
    const polygon = L.polygon(city.boundaries, {
      color,
      fillColor: color,
      fillOpacity: 0.4,
      weight: 2
    }).addTo(mapRef.current);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    polygon.on('mouseover', () => {
      polygon.setStyle({ fillOpacity: 0.6, weight: 3 });
    });
    
    polygon.on('mouseout', () => {
      polygon.setStyle({ fillOpacity: 0.4, weight: 2 });
    });
    
    // –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω
    polygon.on('click', () => {
      setSelectedCity(city.id);
    });
    
    polygonsRef.current.push(polygon);

    // –°–æ–∑–¥–∞–µ–º HTML-—ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ—Ä–æ–¥–µ
    const cityInfo = document.createElement('div');
    cityInfo.className = 'bg-white/90 p-2 rounded shadow-lg border border-gray-200 cursor-pointer';
    cityInfo.innerHTML = `
      <div class="font-bold text-lg">${city.name}</div>
      <div class="text-sm">
        <div>üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: ${city.population} / ${city.maxPopulation}</div>
        <div>‚öîÔ∏è –í–æ–µ–Ω–Ω—ã–µ: ${city.military || 0}</div>
        ${Object.entries(city.resources)
          .map(([resource, amount]) => `<div>${getResourceIcon(resource)} ${resource}: +${amount}</div>`)
          .join('')}
      </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≥–æ—Ä–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º divIcon
    const cityMarker = L.marker([city.latitude, city.longitude], {
      icon: L.divIcon({
        className: 'custom-div-icon',
        html: cityInfo,
        iconSize: [150, city.owner === 'player' ? 120 : 100],
        iconAnchor: [75, 50]
      })
    }).addTo(mapRef.current);

    // –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä
    cityMarker.on('click', () => {
      setSelectedCity(city.id);
    });
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    if (selectedCity === city.id) {
      polygon.setStyle({ fillOpacity: 0.7, weight: 4, color: '#FFD700' });
    }

    markersRef.current.push(cityMarker);
  };

  // –†–∏—Å–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –º–µ–∂–¥—É –≥–æ—Ä–æ–¥–∞–º–∏
  const drawRoutesBetweenCities = () => {
    if (!mapRef.current) return;
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    routesRef.current.forEach(route => route.remove());
    routesRef.current = [];
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
    const processedRoutes = new Set<string>();
    
    cities.forEach(city => {
      if (city.adjacentCities && city.adjacentCities.length > 0) {
        city.adjacentCities.forEach(adjacentCityId => {
          // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞
          const routeId = [city.id, adjacentCityId].sort().join('-');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∏—Å–æ–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç
          if (!processedRoutes.has(routeId)) {
            processedRoutes.add(routeId);
            
            const adjacentCity = cities.find(c => c.id === adjacentCityId);
            if (adjacentCity) {
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≥–æ—Ä–æ–¥–æ–≤
              let routeStyle: L.PolylineOptions = {
                color: '#888888', // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                weight: 3,
                opacity: 0.7,
                dashArray: '5, 10' // –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
              };
              
              // –ï—Å–ª–∏ –æ–±–∞ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –∏–≥—Ä–æ–∫—É, –¥–µ–ª–∞–µ–º –ª–∏–Ω–∏—é —Å–ø–ª–æ—à–Ω–æ–π
              if (city.owner === 'player' && adjacentCity.owner === 'player') {
                routeStyle = {
                  color: '#4CAF50', // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
                  weight: 4,
                  opacity: 0.8,
                  dashArray: null
                };
              }
              
              // –†–∏—Å—É–µ–º –º–∞—Ä—à—Ä—É—Ç
              const route = L.polyline(
                [[city.latitude, city.longitude], [adjacentCity.latitude, adjacentCity.longitude]],
                routeStyle
              ).addTo(mapRef.current!);
              
              // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
              route.bindTooltip(`–ú–∞—Ä—à—Ä—É—Ç ${city.name} - ${adjacentCity.name}`);
              
              routesRef.current.push(route);
            }
          }
        });
      }
    });
  };

  return (
    <div className="h-full w-full">
      <div ref={mapContainerRef} className="h-full w-full"></div>
    </div>
  );
};

export default Map;
