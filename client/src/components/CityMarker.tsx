
import React, { useState } from 'react';
import { Region } from '../../../shared/regionTypes';
import { useMap } from 'react-leaflet';
import { useGameStore } from '../stores/gameStore';
import { Button } from './ui/button';
import { apiRequest } from '../lib/apiRequest';
import { useToast } from './ui/use-toast';
import { useQueryClient } from '@tanstack/react-query';

// –≠–º–æ–¥–∑–∏ –¥–ª—è –∑–¥–∞–Ω–∏–π
const buildingEmojis: Record<string, string> = {
  house: 'üè†',
  farm: 'üåæ',
  barracks: '‚öîÔ∏è',
  gold_mine: 'üí∞',
  metal_mine: '‚õèÔ∏è',
  research_center: 'üî¨',
  oil_rig: 'üõ¢Ô∏è',
  factory: 'üè≠',
  market: 'üè™',
  capital: 'üëë',
  port: '‚öì',
  shipyard: 'üö¢',
  airport: '‚úàÔ∏è',
  university: 'üéì',
  hospital: 'üè•'
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∑–¥–∞–Ω–∏—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –∑–¥–∞–Ω–∏—è
const getBuildingEmoji = (buildingId: string): string => {
  return buildingEmojis[buildingId] || buildingId; // –ï—Å–ª–∏ —ç–º–æ–¥–∑–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID
};

export function CityMarker({ city }: { city: Region }) {
  const map = useMap();
  const { setSelectedCity, gameState, cities } = useGameStore();
  const [showLabel, setShowLabel] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
  let color = 'gray';
  if (city.owner === 'player') {
    color = 'blue';
  } else if (city.owner === 'ai') {
    color = 'red';
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞
  const hasCapital = cities.some(c => c.owner === 'player' && c.buildings.includes('capital'));

  // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–¥–∞–Ω–∏—è
  const availableBuildings = city.availableBuildings || [];
  
  // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –∑–¥–∞–Ω–∏–π
  const buildingLimits = city.buildingLimits || {};

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≥–æ—Ä–æ–¥–∞
  const handleCapture = async (e: React.MouseEvent) => {
    e.stopPropagation();

    try {
      console.log(`Attempting to capture city ${city.id}`);
      const response = await apiRequest('PATCH', `/api/cities/${city.id}/capture`, {
        isCapital: !hasCapital
      });

      if (response.success) {
        toast({
          title: hasCapital ? "–ì–æ—Ä–æ–¥ –∑–∞—Ö–≤–∞—á–µ–Ω!" : "–°—Ç–æ–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞!",
          description: hasCapital ? "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –≥–æ—Ä–æ–¥" : "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–æ–ª–∏—Ü—É",
          variant: "success",
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç–∞
        await queryClient.invalidateQueries({ queryKey: ['/api/cities'] });
        await queryClient.invalidateQueries({ queryKey: ['/api/game-state'] });
      } else {
        toast({
          title: "–û—à–∏–±–∫–∞!",
          description: response.error || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –≥–æ—Ä–æ–¥",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error('Error capturing city:', error);
      toast({
        title: "–û—à–∏–±–∫–∞!",
        description: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –≥–æ—Ä–æ–¥–∞",
        variant: "destructive",
      });
    }
  };

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –ø–æ—Å—Ç—Ä–æ–π–∫–∞—Ö
  const builtBuildingsCounts: Record<string, number> = {};
  city.buildings.forEach(building => {
    builtBuildingsCounts[building] = (builtBuildingsCounts[building] || 0) + 1;
  });

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
  return (
    <div 
      className={`city-marker city-marker-${color} absolute transform -translate-x-1/2 -translate-y-1/2`}
      onClick={() => setSelectedCity(city)}
      onMouseEnter={() => setShowLabel(true)}
      onMouseLeave={() => setShowLabel(false)}
    >
      <div className="text-center min-w-[150px] bg-white/90 p-2 rounded shadow-md border border-gray-200">
        <div className="font-semibold text-sm">{city.name}</div>
        
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="text-xs mt-1">
          <div>üë• –ù–∞—Å–µ–ª–µ–Ω–∏–µ: {city.population} / {city.maxPopulation}</div>
          <div>‚öîÔ∏è –í–æ–µ–Ω–Ω—ã–µ: {city.military || 0}</div>
        </div>
        
        {/* –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ */}
        {city.owner === 'neutral' && (
          <div className="mt-1">
            <div className="text-xs font-semibold">–í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:</div>
            <div className="flex flex-wrap gap-1 mt-1 justify-center">
              {availableBuildings.map(buildingId => {
                const limit = buildingLimits[buildingId] || 0;
                return (
                  <div 
                    key={buildingId} 
                    className="tooltip" 
                    title={`${buildingId} (–º–∞–∫—Å. ${limit})`}
                  >
                    {getBuildingEmoji(buildingId)}
                    <span className="text-[10px] align-top">{limit}</span>
                  </div>
                );
              })}
            </div>
            
            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ */}
            <Button 
              variant="outline" 
              size="sm" 
              className="w-full mt-2 text-xs py-1" 
              onClick={handleCapture}
            >
              {!hasCapital ? "–í—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª–∏—Ü–µ–π" : "–ó–∞—Ö–≤–∞—Ç–∏—Ç—å"}
            </Button>
          </div>
        )}
        
        {/* –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∏–≥—Ä–æ–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏—è */}
        {city.owner === 'player' && (
          <div className="mt-1 text-xs">
            <div className="font-semibold">–ü–æ—Å—Ç—Ä–æ–µ–Ω–æ:</div>
            <div className="flex flex-wrap gap-1 mt-1 justify-center">
              {Object.entries(builtBuildingsCounts).map(([buildingId, count]) => (
                <div key={buildingId} title={buildingId} className="tooltip">
                  {getBuildingEmoji(buildingId)}
                  <span className="text-[10px] align-top">{count}</span>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
